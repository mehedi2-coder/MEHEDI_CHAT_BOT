const fs = require("fs");
const path = __dirname + "/coinxbalance.json";

// coinxbalance.json ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
if (!fs.existsSync(path)) {
  fs.writeFileSync(path, JSON.stringify({}, null, 2));
}

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡ßú‡¶æ
function getBalance(userID) {
  const data = JSON.parse(fs.readFileSync(path));
  if (data[userID]?.balance != null) return data[userID].balance;

  // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏
  if (userID === "100089044681685") return 100000000000; // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  return 10000; // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
}

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
function setBalance(userID, balance) {
  const data = JSON.parse(fs.readFileSync(path));
  data[userID] = { balance };
  fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

module.exports.config = {
	name: "coin",
	version: "1.0.3",
	hasPermssion: 0,
	credits: "Mehedi Hasan",
	description: "Check the amount of yourself or the person tagged",
	commandCategory: "economy",
	usages: "[Tag]",
	cooldowns: 5
};

module.exports.run = async function({ api, event, args, Users }) {
	const { threadID, messageID, senderID, mentions } = event;

	// ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï
	if (!args[0]) {
		let balance = getBalance(senderID);
		return api.sendMessage(`üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${balance}$`, threadID, messageID);
	}

	// ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶≤‡ßá
	else if (Object.keys(mentions).length === 1) {
		const mentionID = Object.keys(mentions)[0];
		let balance = getBalance(mentionID);

		const mentionName = await Users.getNameUser(mentionID);

		return api.sendMessage({
			body: `üí∞ ${mentionName} ‡¶è‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${balance}$`,
			mentions: [{
				tag: mentionName,
				id: mentionID
			}]
		}, threadID, messageID);
	}

	else return api.sendMessage("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°! ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶¨‡¶æ ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§", threadID, messageID);
};
